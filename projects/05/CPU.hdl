// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInsturction);
    // n < 0 の場合にjmpさせる制御ビット
    And(a=instruction[0], b=instruction[15], out=j3);
    // n = 0 の場合にjmpさせる制御ビット
    And(a=instruction[1], b=instruction[15], out=j2);
    // n > 0 の場合にjmpさせる制御ビット
    And(a=instruction[2], b=instruction[15], out=j1);
    //RAM[A]に書き込むかどうかの制御ビット
    And(a=instruction[3], b=instruction[15], out=writeM);
    //Dレジスタに, 出力された値を格納するかどうかの制御ビット
    And(a=instruction[4], b=instruction[15], out=writeDRegister);
    // Aレジスタに, 出力された値を格納するかどうかの制御ビット
    Or(a=isAInsturction, b=instruction[5], out=writeARegister);

    Mux16(a=outALU, b[0..14]=instruction[0..14], b[15]=false, sel=isAInsturction, out=instOroutALU);
    //Aレジスタ
    ARegister(in=instOroutALU, load=writeARegister, out=aRegister16, out[0..14]=addressM);
    // Dレジスタ 
    DRegister(in=outALU, load=writeDRegister, out=dRegister);

    Mux16(a=aRegister16, b=inM, sel=instruction[12], out=aOrM);

    ALU(x=dRegister, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=outEquals0, ng=outLessThan0);
    
    Or(a=outEquals0, b=outLessThan0, out=outLessThanEquals0); // out <= 0
    Not(in=outLessThanEquals0, out=outGreaterThan0); // out > 0 
    Or(a=outGreaterThan0, b=outEquals0, out=outGreaterThanEquals0); // out >= 0
    Or(a=outLessThan0, b=outGreaterThan0, out=outNotEquals0); // out != 0

    // ジャンプ
    DMux8Way(in=true, sel[0]=j3,sel[1]=j2, sel[2]=j1, a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmpScore);
    
    And(a=null, b=false, out=nullScore);

    And(a=jgt, b=outGreaterThan0, out=jgtScore);

    And(a=jeq, b=outEquals0, out=jeqScore);

    And(a=jge, b=outGreaterThanEquals0, out=jgeScore);

    And(a=jlt, b=outLessThan0, out=jltScore);

    And(a=jne, b=outNotEquals0, out=jneScore);

    And(a=jle, b=outLessThanEquals0, out=jleScore);

    Or8Way(in[0]=nullScore, in[1]=jgtScore, in[2]=jeqScore, in[3]=jgeScore, in[4]=jltScore, in[5]=jneScore, in[6]=jleScore, in[7]=jmpScore, out=jump);

    Or(a=jump, b=reset, out=jumpOrReset);
    Not(in=jumpOrReset, out=increment);

    // PC
    PC(in=aRegister16, load=jump, inc=increment, reset=reset, out[0..14]=pc);
}